import {
  require_fix_regexp_well_known_symbol_logic,
  require_regexp_exec_abstract
} from "./chunk-KYZVXR33.js";
import {
  require_to_string
} from "./chunk-BE7A7OMM.js";
import {
  require_an_object,
  require_function_call,
  require_get_method,
  require_is_null_or_undefined,
  require_require_object_coercible
} from "./chunk-CA2VUHL5.js";
import {
  __commonJS,
  init_define_import_meta_env
} from "./chunk-63WBANMH.js";

// ../../node_modules/core-js/internals/same-value.js
var require_same_value = __commonJS({
  "../../node_modules/core-js/internals/same-value.js"(exports, module) {
    init_define_import_meta_env();
    module.exports = Object.is || function is(x, y) {
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };
  }
});

// ../../node_modules/core-js/modules/es.string.search.js
init_define_import_meta_env();
var call = require_function_call();
var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
var anObject = require_an_object();
var isNullOrUndefined = require_is_null_or_undefined();
var requireObjectCoercible = require_require_object_coercible();
var sameValue = require_same_value();
var toString = require_to_string();
var getMethod = require_get_method();
var regExpExec = require_regexp_exec_abstract();
fixRegExpWellKnownSymbolLogic("search", function(SEARCH, nativeSearch, maybeCallNative) {
  return [
    function search(regexp) {
      var O = requireObjectCoercible(this);
      var searcher = isNullOrUndefined(regexp) ? void 0 : getMethod(regexp, SEARCH);
      return searcher ? call(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString(O));
    },
    function(string) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(nativeSearch, rx, S);
      if (res.done)
        return res.value;
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0))
        rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex))
        rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});
//# sourceMappingURL=chunk-3A2AAYQ6.js.map
